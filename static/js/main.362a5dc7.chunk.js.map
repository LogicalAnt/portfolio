{"version":3,"sources":["components/Header/index.tsx","components/Navbar/sidebarItems.tsx","components/Navbar/index.tsx","components/Particle/index.tsx","App.tsx","serviceWorker.js","index.js","images/sidebar-image.jpeg"],"names":["useStyles","makeStyles","theme","createStyles","avatar","width","spacing","height","margin","container","position","top","left","transform","textAlign","zIndex","typedName","color","fontSize","typedSkill","fontWeight","Header","classes","Box","className","Grid","justify","Avatar","src","Typography","variant","strings","typeSpeed","backSpeed","loop","SidebarItems","itemIcon","itemName","Navbar","drawer","backgroundColor","backgroundImage","display","listItem","useState","drawerPosition","setDrawerPosition","toggleDrawer","drawerItems","component","alt","Divider","List","map","item","index","ListItem","key","button","ListItemIcon","ListItemText","primary","AppBar","Toolbar","IconButton","onClick","Drawer","anchor","open","onClose","Particle","style","params","particles","number","value","size","interactivity","events","onhover","enable","mode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.362a5dc7.chunk.js","sourcesContent":["import {\n  Avatar,\n  Box,\n  createStyles,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport Typed from \"react-typed\";\nimport avatar from \"../../images/sidebar-image.jpeg\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    avatar: {\n      width: theme.spacing(25),\n      height: theme.spacing(25),\n      margin: theme.spacing(1),\n    },\n    container: {\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: \"100vw\",\n      textAlign: \"center\",\n      zIndex: 1,\n    },\n    typedName: {\n      color: \"white\",\n      fontSize: \"40px\",\n    },\n    typedSkill: {\n      color: \"yellow\",\n      fontWeight: 500,\n    },\n  })\n);\nexport const Header = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Box className={classes.container}>\n        <Grid container justify=\"center\">\n          <Avatar src={avatar} className={classes.avatar} />\n        </Grid>\n        <Typography variant=\"h4\" className={classes.typedName}>\n          <Typed strings={[\"Shakil Ahmed\"]} typeSpeed={100} />\n        </Typography>\n        <Typography className={classes.typedSkill}>\n          <Typed\n            strings={[\n              \"FULL-STACK SOFTWARE ENGINEER\",\n              \"Javascript Enthusiast\",\n              \"Php Specialist\",\n            ]}\n            typeSpeed={40}\n            backSpeed={50}\n            loop\n          />\n        </Typography>\n      </Box>\n    </>\n  );\n};\n","import ContactMailIcon from \"@material-ui/icons/ContactMail\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DnsIcon from \"@material-ui/icons/Dns\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\nimport ImportContactsIcon from \"@material-ui/icons/ImportContacts\";\nimport SchoolIcon from \"@material-ui/icons/School\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport React from \"react\";\n\nexport const SidebarItems = [\n  {\n    itemIcon: <ImportContactsIcon />,\n    itemName: \"About\",\n  },\n  {\n    itemIcon: <WorkIcon />,\n    itemName: \"Experience\",\n  },\n  {\n    itemIcon: <DnsIcon />,\n    itemName: \"Projects\",\n  },\n  {\n    itemIcon: <EqualizerIcon />,\n    itemName: \"Skills\",\n  },\n  {\n    itemIcon: <SchoolIcon />,\n    itemName: \"Education\",\n  },\n  {\n    itemIcon: <CreateIcon />,\n    itemName: \"Blog\",\n  },\n  {\n    itemIcon: <ContactMailIcon />,\n    itemName: \"Contact\",\n  },\n];\n","import {\n  AppBar,\n  Avatar,\n  Box,\n  createStyles,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  Theme,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React, { useState } from \"react\";\nimport avatar from \"../../images/sidebar-image.jpeg\";\nimport { SidebarItems } from \"./sidebarItems\";\nimport \"./styles.css\";\nexport const Navbar = () => {\n  const useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n      drawer: {\n        width: 250,\n        backgroundColor: \"#8ae9b3\",\n        backgroundImage: \"linear-gradient(315deg, #8ae9b3 0%, #c8d6e5 74%)\",\n\n        height: \"100%\",\n      },\n      avatar: {\n        display: \"block\",\n        margin: \"0.5rem auto\",\n        width: theme.spacing(13),\n        height: theme.spacing(13),\n      },\n      listItem: {\n        color: \"black\",\n      },\n    })\n  );\n  const classes = useStyles();\n\n  const [drawerPosition, setDrawerPosition] = useState({\n    left: false,\n  });\n\n  const toggleDrawer = () => {\n    setDrawerPosition({\n      left: !drawerPosition.left,\n    });\n  };\n\n  const drawerItems = (\n    <Box component=\"div\" className={classes.drawer}>\n      <Avatar className={classes.avatar} src={avatar} alt=\"no image\" />\n      <Divider />\n      <List component=\"nav\">\n        {SidebarItems.map((item, index) => (\n          <ListItem key={index} className={classes.listItem} button>\n            <ListItemIcon>{item.itemIcon}</ListItemIcon>\n            <ListItemText primary={item.itemName} />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n\n  return (\n    <>\n      <Box component=\"nav\">\n        <AppBar className=\"navBar\" position=\"static\">\n          <Toolbar>\n            <IconButton onClick={toggleDrawer}>\n              <MenuIcon className=\"navBarArrow\" />\n            </IconButton>\n            <Typography variant=\"h6\">Shakil Ahmed</Typography>\n            <Drawer\n              anchor=\"left\"\n              open={drawerPosition.left}\n              onClose={toggleDrawer}\n            >\n              {drawerItems}\n            </Drawer>\n          </Toolbar>\n        </AppBar>\n      </Box>\n    </>\n  );\n};\n","import React from \"react\";\nimport Particles from \"react-particles-js\";\n\nexport const Particle = () => {\n  return (\n    <>\n      <Particles\n        style={{ position: \"absolute\" }}\n        params={{\n          particles: {\n            number: {\n              value: 50,\n            },\n            size: {\n              value: 3,\n            },\n            color: {\n              value: \"#a5e22b\",\n            },\n          },\n\n          interactivity: {\n            events: {\n              onhover: {\n                enable: true,\n                mode: \"repulse\",\n              },\n            },\n          },\n        }}\n      />\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Header } from \"./components/Header\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Particle } from \"./components/Particle\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Header />\n      <Particle />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sidebar-image.63a94cc8.jpeg\";"],"sourceRoot":""}